{"ast":null,"code":"var _jsxFileName = \"/home/batman/Downloads/multi-01-starting-setup/frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport GoalInput from './components/goals/GoalInput';\nimport CourseGoals from './components/goals/CourseGoals';\nimport ErrorAlert from './components/UI/ErrorAlert';\n\nfunction App() {\n  const [loadedGoals, setLoadedGoals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(function () {\n    async function fetchData() {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost/goals');\n        const resData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(resData.message || 'Fetching the goals failed.');\n        }\n\n        setLoadedGoals(resData.goals);\n      } catch (err) {\n        setError(err.message || 'Fetching goals failed - the server responsed with an error.');\n      }\n\n      setIsLoading(false);\n    }\n\n    fetchData();\n  }, []);\n\n  async function addGoalHandler(goalText) {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('http://localhost/goals', {\n        method: 'POST',\n        body: JSON.stringify({\n          text: goalText\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const resData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(resData.message || 'Adding the goal failed.');\n      }\n\n      setLoadedGoals(prevGoals => {\n        const updatedGoals = [{\n          id: resData.goal.id,\n          text: goalText\n        }, ...prevGoals];\n        return updatedGoals;\n      });\n    } catch (err) {\n      setError(err.message || 'Adding a goal failed - the server responsed with an error.');\n    }\n\n    setIsLoading(false);\n  }\n\n  async function deleteGoalHandler(goalId) {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('http://localhost/goals/' + goalId, {\n        method: 'DELETE'\n      });\n      const resData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(resData.message || 'Deleting the goal failed.');\n      }\n\n      setLoadedGoals(prevGoals => {\n        const updatedGoals = prevGoals.filter(goal => goal.id !== goalId);\n        return updatedGoals;\n      });\n    } catch (err) {\n      setError(err.message || 'Deleting the goal failed - the server responsed with an error.');\n    }\n\n    setIsLoading(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, error && /*#__PURE__*/React.createElement(ErrorAlert, {\n    errorText: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(GoalInput, {\n    onAddGoal: addGoalHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), !isLoading && /*#__PURE__*/React.createElement(CourseGoals, {\n    goals: loadedGoals,\n    onDeleteGoal: deleteGoalHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/batman/Downloads/multi-01-starting-setup/frontend/src/App.js"],"names":["React","useState","useEffect","GoalInput","CourseGoals","ErrorAlert","App","loadedGoals","setLoadedGoals","isLoading","setIsLoading","error","setError","fetchData","response","fetch","resData","json","ok","Error","message","goals","err","addGoalHandler","goalText","method","body","JSON","stringify","text","headers","prevGoals","updatedGoals","id","goal","deleteGoalHandler","goalId","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport GoalInput from './components/goals/GoalInput';\nimport CourseGoals from './components/goals/CourseGoals';\nimport ErrorAlert from './components/UI/ErrorAlert';\n\nfunction App() {\n  const [loadedGoals, setLoadedGoals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(function () {\n    async function fetchData() {\n      setIsLoading(true);\n\n      try {\n        const response = await fetch('http://localhost/goals');\n\n        const resData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(resData.message || 'Fetching the goals failed.');\n        }\n\n        setLoadedGoals(resData.goals);\n      } catch (err) {\n        setError(\n          err.message ||\n            'Fetching goals failed - the server responsed with an error.'\n        );\n      }\n      setIsLoading(false);\n    }\n\n    fetchData();\n  }, []);\n\n  async function addGoalHandler(goalText) {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('http://localhost/goals', {\n        method: 'POST',\n        body: JSON.stringify({\n          text: goalText,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const resData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(resData.message || 'Adding the goal failed.');\n      }\n\n      setLoadedGoals((prevGoals) => {\n        const updatedGoals = [\n          {\n            id: resData.goal.id,\n            text: goalText,\n          },\n          ...prevGoals,\n        ];\n        return updatedGoals;\n      });\n    } catch (err) {\n      setError(\n        err.message ||\n          'Adding a goal failed - the server responsed with an error.'\n      );\n    }\n    setIsLoading(false);\n  }\n\n  async function deleteGoalHandler(goalId) {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('http://localhost/goals/' + goalId, {\n        method: 'DELETE',\n      });\n\n      const resData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(resData.message || 'Deleting the goal failed.');\n      }\n\n      setLoadedGoals((prevGoals) => {\n        const updatedGoals = prevGoals.filter((goal) => goal.id !== goalId);\n        return updatedGoals;\n      });\n    } catch (err) {\n      setError(\n        err.message ||\n          'Deleting the goal failed - the server responsed with an error.'\n      );\n    }\n    setIsLoading(false);\n  }\n\n  return (\n    <div>\n      {error && <ErrorAlert errorText={error} />}\n      <GoalInput onAddGoal={addGoalHandler} />\n      {!isLoading && (\n        <CourseGoals goals={loadedGoals} onDeleteGoal={deleteGoalHandler} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}